"""
Main window for the Squeezeit Compression Tool.

This module provides the main GUI window for the application.
"""

from PyQt6.QtWidgets import (
    QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QLabel, QPushButton, QFileDialog, QTabWidget, QSizePolicy, QProgressBar, QMessageBox, QGroupBox, QRadioButton, QButtonGroup
)
from PIL import Image, ImageQt
from PyQt6.QtCore import Qt, QThread, pyqtSignal
from PyQt6.QtGui import QPixmap, QImage
import os

from image_compression import rle, huffman
from utils import file_utils
from video_compression import delta, motion

class CompressionThread(QThread):
    """Thread for running compression operations."""

    progress_signal = pyqtSignal(int)
    finished_signal = pyqtSignal(object)
    error_signal = pyqtSignal(str)

    def __init__(self, file_type, algorithm, input_path, output_path):
        """Initialize the thread."""
        super().__init__()
        self.file_type = file_type  # 'image' or 'video'
        self.algorithm = algorithm
        self.input_path = input_path
        self.output_path = output_path

    def run(self):
        """Run the compression operation."""
        try:
            self.progress_signal.emit(10)

            if self.file_type == 'image':
                # Load image
                image = file_utils.load_image(self.input_path)
                self.progress_signal.emit(30)

                # Compress image
                if self.algorithm == 'rle':
                    compressed_data = rle.compress(image)
                elif self.algorithm == 'huffman':
                    compressed_data = huffman.compress(image)
                else:
                    raise ValueError(f"Unknown image algorithm: {self.algorithm}")

                self.progress_signal.emit(70)

                # Save compressed data
                file_utils.save_compressed_data(compressed_data, self.output_path)
                self.progress_signal.emit(90)

                # Return the compressed data
                self.finished_signal.emit(compressed_data)

            elif self.file_type == 'video':
                # Load video
                frames, fps = file_utils.load_video(self.input_path)
                self.progress_signal.emit(30)

                # Compress video
                if self.algorithm == 'delta':
                    compressed_data = delta.compress(frames)
                elif self.algorithm == 'motion':
                    compressed_data = motion.compress(frames)
                else:
                    raise ValueError(f"Unknown video algorithm: {self.algorithm}")

                self.progress_signal.emit(70)

                # Save compressed data
                file_utils.save_compressed_data(compressed_data, self.output_path)
                self.progress_signal.emit(90)

                # Return the compressed data and fps
                self.finished_signal.emit((compressed_data, fps))

            else:
                raise ValueError(f"Unknown file type: {self.file_type}")

            self.progress_signal.emit(100)

        except Exception as e:
            self.error_signal.emit(str(e))

class DecompressionThread(QThread):
    """Thread for running decompression operations."""

    progress_signal = pyqtSignal(int)
    finished_signal = pyqtSignal(object)
    error_signal = pyqtSignal(str)

    def __init__(self, file_type, algorithm, input_path, output_path):
        """Initialize the thread."""
        super().__init__()
        self.file_type = file_type  # 'image' or 'video'
        self.algorithm = algorithm
        self.input_path = input_path
        self.output_path = output_path

    def run(self):
        """Run the decompression operation."""
        try:
            self.progress_signal.emit(10)

            # Load compressed data
            compressed_data = file_utils.load_compressed_data(self.input_path)
            self.progress_signal.emit(30)

            if self.file_type == 'image':
                # Decompress image
                if self.algorithm == 'rle':
                    decompressed_image = rle.decompress(compressed_data)
                elif self.algorithm == 'huffman':
                    decompressed_image = huffman.decompress(compressed_data)
                else:
                    raise ValueError(f"Unknown image algorithm: {self.algorithm}")

                self.progress_signal.emit(70)

                # Save decompressed image
                file_utils.save_image(decompressed_image, self.output_path)
                self.progress_signal.emit(90)

                # Return the decompressed image
                self.finished_signal.emit(decompressed_image)

            elif self.file_type == 'video':
                # Decompress video
                if self.algorithm == 'delta':
                    decompressed_frames = delta.decompress(compressed_data)
                elif self.algorithm == 'motion':
                    decompressed_frames = motion.decompress(compressed_data)
                else:
                    raise ValueError(f"Unknown video algorithm: {self.algorithm}")

                self.progress_signal.emit(70)

                # Save decompressed video (assuming 30 fps if not specified)
                fps = 30
                file_utils.save_video(decompressed_frames, fps, self.output_path)
                self.progress_signal.emit(90)

                # Return the decompressed frames and fps
                self.finished_signal.emit((decompressed_frames, fps))

            else:
                raise ValueError(f"Unknown file type: {self.file_type}")

            self.progress_signal.emit(100)

        except Exception as e:
            self.error_signal.emit(str(e))

class MainWindow(QMainWindow):
    """Main window for the Squeezeit Compression Tool."""

    def __init__(self):
        """Initialize the main window."""
        super().__init__()

        self.setWindowTitle("Squeezeit Compression Tool")
        self.setMinimumSize(800, 600)

        # Initialize instance variables
        self.input_file_path = None
        self.compressed_file_path = None
        self.decompressed_file_path = None
        self.file_type = None  # 'image' or 'video'
        self.current_algorithm = None

        # Set up the UI
        self.setup_ui()

    def setup_ui(self):
        """Set up the user interface."""
        # Create central widget and main layout
        central_widget = QWidget()
        main_layout = QVBoxLayout(central_widget)

        # Create tabs for image and video compression
        tabs = QTabWidget()
        image_tab = QWidget()
        video_tab = QWidget()

        tabs.addTab(image_tab, "Image Compression")
        tabs.addTab(video_tab, "Video Compression")

        # Set up image tab
        image_layout = QVBoxLayout(image_tab)

        # File selection section
        file_group = QGroupBox("Input Image")
        file_layout = QHBoxLayout(file_group)

        self.image_file_label = QLabel("No file selected")
        file_layout.addWidget(self.image_file_label)

        select_file_button = QPushButton("Select Image")
        select_file_button.clicked.connect(lambda: self.select_file('image'))
        file_layout.addWidget(select_file_button)

        image_layout.addWidget(file_group)

        # Algorithm selection section
        algo_group = QGroupBox("Algorithm")
        algo_layout = QHBoxLayout(algo_group)

        self.image_algo_rle = QRadioButton("Run-Length Encoding (RLE)")
        self.image_algo_huffman = QRadioButton("Huffman Coding")
        self.image_algo_rle.setChecked(True)

        image_algo_group = QButtonGroup(self)
        image_algo_group.addButton(self.image_algo_rle)
        image_algo_group.addButton(self.image_algo_huffman)

        algo_layout.addWidget(self.image_algo_rle)
        algo_layout.addWidget(self.image_algo_huffman)

        image_layout.addWidget(algo_group)

        # Action buttons
        action_layout = QHBoxLayout()

        self.compress_image_button = QPushButton("Compress Image")
        self.compress_image_button.clicked.connect(lambda: self.compress('image'))
        self.compress_image_button.setEnabled(False)

        self.decompress_image_button = QPushButton("Decompress Image")
        self.decompress_image_button.clicked.connect(lambda: self.decompress('image'))
        self.decompress_image_button.setEnabled(False)

        action_layout.addWidget(self.compress_image_button)
        action_layout.addWidget(self.decompress_image_button)

        image_layout.addLayout(action_layout)

        # Progress bar
        self.image_progress = QProgressBar()
        self.image_progress.setRange(0, 100)
        self.image_progress.setValue(0)
        image_layout.addWidget(self.image_progress)

        # Image preview section
        preview_layout = QHBoxLayout()

        # Original image
        original_group = QGroupBox("Original Image")
        original_layout = QVBoxLayout(original_group)

        self.original_image_label = QLabel()
        self.original_image_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.original_image_label.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Expanding)

        original_layout.addWidget(self.original_image_label)
        self.original_image_size_label = QLabel("Size: N/A")
        original_layout.addWidget(self.original_image_size_label)

        preview_layout.addWidget(original_group)

        # Compressed/Decompressed image
        processed_group = QGroupBox("Processed Image")
        processed_layout = QVBoxLayout(processed_group)

        self.processed_image_label = QLabel()
        self.processed_image_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.processed_image_label.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Expanding)

        processed_layout.addWidget(self.processed_image_label)
        self.processed_image_size_label = QLabel("Size: N/A")
        processed_layout.addWidget(self.processed_image_size_label)

        preview_layout.addWidget(processed_group)

        image_layout.addLayout(preview_layout)

        # Set up video tab (similar to image tab)
        video_layout = QVBoxLayout(video_tab)

        # File selection section
        video_file_group = QGroupBox("Input Video")
        video_file_layout = QHBoxLayout(video_file_group)

        self.video_file_label = QLabel("No file selected")
        video_file_layout.addWidget(self.video_file_label)

        select_video_button = QPushButton("Select Video")
        select_video_button.clicked.connect(lambda: self.select_file('video'))
        video_file_layout.addWidget(select_video_button)

        video_layout.addWidget(video_file_group)

        # Algorithm selection section
        video_algo_group_box = QGroupBox("Algorithm")
        video_algo_layout = QHBoxLayout(video_algo_group_box)

        self.video_algo_delta = QRadioButton("Delta Encoding")
        self.video_algo_motion = QRadioButton("Motion Compensation")
        self.video_algo_delta.setChecked(True)

        video_algo_group = QButtonGroup(self)
        video_algo_group.addButton(self.video_algo_delta)
        video_algo_group.addButton(self.video_algo_motion)

        video_algo_layout.addWidget(self.video_algo_delta)
        video_algo_layout.addWidget(self.video_algo_motion)

        video_layout.addWidget(video_algo_group_box)

        # Action buttons
        video_action_layout = QHBoxLayout()

        self.compress_video_button = QPushButton("Compress Video")
        self.compress_video_button.clicked.connect(lambda: self.compress('video'))
        self.compress_video_button.setEnabled(False)

        self.decompress_video_button = QPushButton("Decompress Video")
        self.decompress_video_button.clicked.connect(lambda: self.decompress('video'))
        self.decompress_video_button.setEnabled(False)

        video_action_layout.addWidget(self.compress_video_button)
        video_action_layout.addWidget(self.decompress_video_button)

        video_layout.addLayout(video_action_layout)

        # Progress bar
        self.video_progress = QProgressBar()
        self.video_progress.setRange(0, 100)
        self.video_progress.setValue(0)
        video_layout.addWidget(self.video_progress)

        # Video preview section (simplified, just showing first frame)
        video_preview_layout = QHBoxLayout()

        # Original video
        original_video_group = QGroupBox("Original Video")
        original_video_layout = QVBoxLayout(original_video_group)

        self.original_video_label = QLabel()
        self.original_video_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.original_video_label.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Expanding)

        original_video_layout.addWidget(self.original_video_label)
        self.original_video_size_label = QLabel("Size: N/A")
        original_video_layout.addWidget(self.original_video_size_label)

        video_preview_layout.addWidget(original_video_group)

        # Compressed/Decompressed video
        processed_video_group = QGroupBox("Processed Video")
        processed_video_layout = QVBoxLayout(processed_video_group)

        self.processed_video_label = QLabel()
        self.processed_video_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.processed_video_label.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Expanding)

        processed_video_layout.addWidget(self.processed_video_label)
        self.processed_video_size_label = QLabel("Size: N/A")
        processed_video_layout.addWidget(self.processed_video_size_label)

        video_preview_layout.addWidget(processed_video_group)

        video_layout.addLayout(video_preview_layout)

        # Add tabs to main layout
        main_layout.addWidget(tabs)

        # Set central widget
        self.setCentralWidget(central_widget)

    def select_file(self, file_type):
        """
        Open a file dialog to select an input file.

        Args:
            file_type: Type of file to select ('image' or 'video')
        """
        if file_type == 'image':
            file_path, _ = QFileDialog.getOpenFileName(
                self, "Select Image", "", "Image Files (*.png *.jpg *.jpeg *.bmp)"
            )
        else:  # video
            file_path, _ = QFileDialog.getOpenFileName(
                self, "Select Video", "", "Video Files (*.mp4 *.avi *.mov)"
            )

        if file_path:
            self.input_file_path = file_path
            self.file_type = file_type

            # Update UI
            if file_type == 'image':
                self.image_file_label.setText(os.path.basename(file_path))
                self.compress_image_button.setEnabled(True)
                self.decompress_image_button.setEnabled(False)

                # Display original image
                image = file_utils.load_image(file_path)
                self.display_image(image, self.original_image_label)

                # Update size label
                size = file_utils.get_file_size(file_path)
                self.original_image_size_label.setText(f"Size: {file_utils.format_size(size)}")

                # Clear processed image
                self.processed_image_label.clear()
                self.processed_image_size_label.setText("Size: N/A")

            else:  # video
                self.video_file_label.setText(os.path.basename(file_path))
                self.compress_video_button.setEnabled(True)
                self.decompress_video_button.setEnabled(False)

                # Display first frame of original video
                frames, _ = file_utils.load_video(file_path)
                if frames:
                    self.display_frame(frames[0], self.original_video_label)

                # Update size label
                size = file_utils.get_file_size(file_path)
                self.original_video_size_label.setText(f"Size: {file_utils.format_size(size)}")

                # Clear processed video
                self.processed_video_label.clear()
                self.processed_video_size_label.setText("Size: N/A")

    def compress(self, file_type):
        """
        Compress the selected file.

        Args:
            file_type: Type of file to compress ('image' or 'video')
        """
        if not self.input_file_path:
            return

        # Determine algorithm
        if file_type == 'image':
            if self.image_algo_rle.isChecked():
                algorithm = 'rle'
            else:
                algorithm = 'huffman'
        else:  # video
            if self.video_algo_delta.isChecked():
                algorithm = 'delta'
            else:
                algorithm = 'motion'

        self.current_algorithm = algorithm

        # Get output file path
        if file_type == 'image':
            output_path, _ = QFileDialog.getSaveFileName(
                self, "Save Compressed Image", "", "Compressed Files (*.sqz)"
            )
        else:  # video
            output_path, _ = QFileDialog.getSaveFileName(
                self, "Save Compressed Video", "", "Compressed Files (*.sqz)"
            )

        if not output_path:
            return

        # Add extension if not present
        if not output_path.endswith('.sqz'):
            output_path += '.sqz'

        self.compressed_file_path = output_path

        # Disable buttons during compression
        if file_type == 'image':
            self.compress_image_button.setEnabled(False)
            progress_bar = self.image_progress
        else:  # video
            self.compress_video_button.setEnabled(False)
            progress_bar = self.video_progress

        # Create and start compression thread
        self.compression_thread = CompressionThread(
            file_type, algorithm, self.input_file_path, output_path
        )
        self.compression_thread.progress_signal.connect(progress_bar.setValue)
        self.compression_thread.finished_signal.connect(
            lambda result: self.compression_finished(result, file_type)
        )
        self.compression_thread.error_signal.connect(self.show_error)
        self.compression_thread.start()

    def compression_finished(self, result, file_type):
        """
        Handle completion of compression operation.

        Args:
            result: Result of the compression operation
            file_type: Type of file that was compressed ('image' or 'video')
        """
        if file_type == 'image':
            # Update UI
            self.compress_image_button.setEnabled(True)
            self.decompress_image_button.setEnabled(True)

            # Update size label
            size = file_utils.get_file_size(self.compressed_file_path)
            self.processed_image_size_label.setText(f"Size: {file_utils.format_size(size)}")

            # Show compression ratio
            original_size = file_utils.get_file_size(self.input_file_path)
            ratio = original_size / size
            QMessageBox.information(
                self, "Compression Complete",
                f"Compression ratio: {ratio:.2f}x\n"
                f"Original size: {file_utils.format_size(original_size)}\n"
                f"Compressed size: {file_utils.format_size(size)}"
            )

        else:  # video
            # Update UI
            self.compress_video_button.setEnabled(True)
            self.decompress_video_button.setEnabled(True)

            # Update size label
            size = file_utils.get_file_size(self.compressed_file_path)
            self.processed_video_size_label.setText(f"Size: {file_utils.format_size(size)}")

            # Show compression ratio
            original_size = file_utils.get_file_size(self.input_file_path)
            ratio = original_size / size
            QMessageBox.information(
                self, "Compression Complete",
                f"Compression ratio: {ratio:.2f}x\n"
                f"Original size: {file_utils.format_size(original_size)}\n"
                f"Compressed size: {file_utils.format_size(size)}"
            )

    def decompress(self, file_type):
        """
        Decompress the compressed file.

        Args:
            file_type: Type of file to decompress ('image' or 'video')
        """
        if not self.compressed_file_path:
            # If no compressed file yet, ask user to select one
            if file_type == 'image':
                input_path, _ = QFileDialog.getOpenFileName(
                    self, "Select Compressed Image", "", "Compressed Files (*.sqz)"
                )
            else:  # video
                input_path, _ = QFileDialog.getOpenFileName(
                    self, "Select Compressed Video", "", "Compressed Files (*.sqz)"
                )

            if not input_path:
                return

            self.compressed_file_path = input_path

        # Get output file path
        if file_type == 'image':
            # Determine original file extension if possible
            original_ext = '.jpg'  # Default to jpg
            if self.input_file_path:
                _, original_ext = os.path.splitext(self.input_file_path)
                if not original_ext:
                    original_ext = '.jpg'

            # Use the same format as the input file
            filter_str = f"Image Files (*{original_ext})"
            output_path, _ = QFileDialog.getSaveFileName(
                self, "Save Decompressed Image", "", filter_str
            )
        else:  # video
            output_path, _ = QFileDialog.getSaveFileName(
                self, "Save Decompressed Video", "", "Video Files (*.mp4)"
            )

        if not output_path:
            return

        # Add extension if not present
        if file_type == 'image':
            # Check if the path already has an extension
            _, ext = os.path.splitext(output_path)
            if not ext:
                # Use the same extension as the input file
                output_path += original_ext
        elif file_type == 'video' and not output_path.endswith('.mp4'):
            output_path += '.mp4'

        self.decompressed_file_path = output_path

        # Disable buttons during decompression
        if file_type == 'image':
            self.decompress_image_button.setEnabled(False)
            progress_bar = self.image_progress
        else:  # video
            self.decompress_video_button.setEnabled(False)
            progress_bar = self.video_progress

        # Create and start decompression thread
        self.decompression_thread = DecompressionThread(
            file_type, self.current_algorithm, self.compressed_file_path, output_path
        )
        self.decompression_thread.progress_signal.connect(progress_bar.setValue)
        self.decompression_thread.finished_signal.connect(
            lambda result: self.decompression_finished(result, file_type)
        )
        self.decompression_thread.error_signal.connect(self.show_error)
        self.decompression_thread.start()

    def decompression_finished(self, result, file_type):
        """
        Handle completion of decompression operation.

        Args:
            result: Result of the decompression operation
            file_type: Type of file that was decompressed ('image' or 'video')
        """
        if file_type == 'image':
            # Update UI
            self.decompress_image_button.setEnabled(True)

            # Display decompressed image
            self.display_image(result, self.processed_image_label)

            # Update size label
            size = file_utils.get_file_size(self.decompressed_file_path)
            self.processed_image_size_label.setText(f"Size: {file_utils.format_size(size)}")

            QMessageBox.information(
                self, "Decompression Complete",
                f"Decompressed image saved to:\n{self.decompressed_file_path}"
            )

        else:  # video
            # Update UI
            self.decompress_video_button.setEnabled(True)

            # Display first frame of decompressed video
            frames, _ = result
            if frames:
                self.display_frame(frames[0], self.processed_video_label)

            # Update size label
            size = file_utils.get_file_size(self.decompressed_file_path)
            self.processed_video_size_label.setText(f"Size: {file_utils.format_size(size)}")

            QMessageBox.information(
                self, "Decompression Complete",
                f"Decompressed video saved to:\n{self.decompressed_file_path}"
            )

    def display_image(self, image, label):
        """
        Display an image in a QLabel.

        Args:
            image: PIL Image object
            label: QLabel to display the image in
        """
        if isinstance(image, Image.Image):
            # Convert PIL Image to QPixmap
            qimage = ImageQt.ImageQt(image)
            pixmap = QPixmap.fromImage(qimage)
        else:
            # Convert numpy array to QPixmap
            height, width, channels = image.shape
            bytes_per_line = channels * width
            qimage = QImage(image.data, width, height, bytes_per_line, QImage.Format.Format_RGB888)
            pixmap = QPixmap.fromImage(qimage)

        # Scale pixmap to fit label while maintaining aspect ratio
        pixmap = pixmap.scaled(
            label.size(), Qt.AspectRatioMode.KeepAspectRatio, Qt.TransformationMode.SmoothTransformation
        )

        label.setPixmap(pixmap)

    def display_frame(self, frame, label):
        """
        Display a video frame in a QLabel.

        Args:
            frame: Numpy array representing a video frame
            label: QLabel to display the frame in
        """
        # Convert numpy array to QPixmap
        height, width, channels = frame.shape
        bytes_per_line = channels * width
        qimage = QImage(frame.data, width, height, bytes_per_line, QImage.Format.Format_RGB888)
        pixmap = QPixmap.fromImage(qimage)

        # Scale pixmap to fit label while maintaining aspect ratio
        pixmap = pixmap.scaled(
            label.size(), Qt.AspectRatioMode.KeepAspectRatio, Qt.TransformationMode.SmoothTransformation
        )

        label.setPixmap(pixmap)

    def show_error(self, error_message):
        """
        Show an error message.

        Args:
            error_message: Error message to display
        """
        QMessageBox.critical(self, "Error", error_message)

        # Re-enable buttons
        self.compress_image_button.setEnabled(True)
        self.decompress_image_button.setEnabled(True)
        self.compress_video_button.setEnabled(True)
        self.decompress_video_button.setEnabled(True)
